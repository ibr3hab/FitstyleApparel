import express from 'express';
import mysql from 'mysql2';
import cors from 'cors';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import multer from 'multer';
import path from 'path';



const app = express();
const port = process.env.PORT || 5001;
const JWT_SECRET = 'supersecretkey$12345!jwt_secret';




app.use(cors());
app.use(express.json());
// app.use('/uploads',express.static('uploads'));

app.use('/uploads',express.static('uploads'));

const storage = multer.diskStorage({
          destination : (req,file,cb)=>{
            cb(null , 'uploads/')
          },
          filename : (req,file,cb)=>{
            cb(null , Date.now() + path.extname(file.originalname));
          }

})

const upload =    multer({storage : storage})





const db = mysql.createConnection({ // This creates the sql database//
    host : '127.0.0.1',
    user : 'sammy',
    password : 'password',
    database : 'FitstyleApparel',
    port : 3306,
})

db.connect((err)=>{
     if(err){
        console.error('Error connecting to the database',err);
     }   
     console.log('Successfully connected to the database');
})







const verifyToken = (req,res,next) =>{
    const token = req.headers['authorization']?.split(' ')[1];


    jwt.verify(token , JWT_SECRET , (err,decoded) =>{  //Verifies if the token is in correct format and the tokenid is the same as the decoded to ensure that id has not been tampered with //
      if(err) return res.status(401).json({error : "Unauthorized"});    
      req.userId =  decoded.id;
      next();
    })
}


app.post('/api/auth/register', async (req,res)=>{
     const {name,email,password} = req.body;
     const hashedPassword = await bcrypt.hash(password , 10);
     console.log("Registration done"); 

     const query = 'INSERT INTO users (name , email , password) VALUES (?,?,?)' //Command line used to Create the table//
     db.query(query , [name , email , hashedPassword] , (err,result)=>{ //Sending the request to the database//
        if(err){
            res.status(500).json({error : 'Error registering the user'});
            console.log("Error",err)
            return

        }

        console.log("added to the database");

        const token = jwt.sign({id : result.insertId} , JWT_SECRET , {expiresIn : '3h'}) //id : result.insertId is used to create the token
        // insert.Id is generated by the database  , this jwt.sign is used to create the token and sign with it 
        res.json({token , user : {id : result.insertId , name , email}});

        
     })
})

app.post('/api/auth/login',  (req , res)=>{

    const {email , password} = req.body; // This the details which the client enters
    const query = 'SELECT * FROM users WHERE email = ?' // SQL command used to fetch the users details //

    db.query(query , [email] , async (err , results)=>{
       if(err || results.length === 0){
        res.status(401).json({error : " Invalid credintials"});
        return
       }
    

    const user = results[0]; // Fetched the 1st array of the database

    const isMatch = await bcrypt.compare(password , user.password)
    if(!isMatch){
        res.status(401).json({error : "Invalid credintials"});
        return
    }

    const token = jwt.sign({id : user.id} , JWT_SECRET ,{expiresIn :'1h'})
    res.json({token , user : {id : user.id , name : user.name , email : user.email}})
    }) // res.json is sent to the frontend and in most cases they are stored in the local storage or they are mostly sent as response for in postman 
})

app.get('/api/auth/validate',verifyToken , (req,res)=>{
   // If the verifyToken passes then the id is verified //
res.json({ valid : true , user : req.userId})  
})



app.post('/api/products',verifyToken,(req,res)=>{   

    const {name , price , description , imageURL } = req.body;
    
    const query = 'INSERT INTO products (name , price , description ,imageURL) VALUES(?,?,?,?)'
    
    db.query(query,[name , price , description , imageURL],(err,result)=>{
        if(err){
            res.status(500).json({error : "Error getting the data"});
            return
        }
        res.status(201).json({id:result.insertId , name , price , description , imageURL})
    })
})

app.get('/api/products',(req,res)=>{
    const query = "SELECT * FROM products";
    db.query(query , (err , result)=>{
        if(err){
            res.status(500).json({error: "Error fetching the data"});
        return
        }
        res.json(result);   
    })
})

app.get('/api/products/:id',(req,res)=>{
    const query = "SELECT * FROM products WHERE id = ?";

    db.query(query , (err , results)=>{
        if(err){
            res.status(500).json({error : "Error in getting the data"})
        }
        if(results.length === 0){
            res.status(404).json({error : "Product not found"});
        }
        res.json(results[0])
        })
    })

app.put('/api/products/:id',verifyToken , (req,res)=>{
    const {name , price , description , imageURL } = req.body;

    const query = 'UPDATE products SET name = ? , price = ? , description = ? , imageURL= ? WHERE id = ?';

    db.query(query, [name, price, description, imageURL, req.params.id], (err, result) => {
        if (err) {
          res.status(500).json({ error: "Error updating the product" });
          return;
        }
        if (result.affectedRows === 0) {
          res.status(404).json({ error: "Product not found" });
          return;
        }
        res.json({ id: req.params.id, name, price, description, imageURL });
      });     
})    


app.delete('/api/products/:id',verifyToken , (req,res)=>{
    const query = 'DELETE FROM products WHERE id = ?';

    db.query(query , req.params.id , (err , result)=>{
        if(err){
            res.status(500).json({error : "Error deleting the product"});
            return
        }
        if(result.affectedRows === 0){
            res.status(404).json({error : "Product not found"})
        }

        res.json({message : "Product deleted successfully"})

    })
})



app.post('/api/cart' , verifyToken , (req,res)=>{

    const {productId , quantity} = req.body;
    console.log(req.body);

    const query = "INSERT INTO cart (userId , productId , quantity ,name) VALUES (?,?,?,(SELECT name FROM products WHERE id =?)) ON DUPLICATE KEY UPDATE quantity = quantity + VALUES(quantity)";
                 //The above SQL command is used add my userId , productId quantity to the cart and on updating the cart the quantity will get updated //

    db.query(query , [req.userId , productId , quantity , productId] , (err , result)=>{
      if(err){
        res.status(500).json({error : "Error adding the product to the cart from backend"});
        return
      }
      
      res.status(201).json({userId : req.userId , productId , quantity});
    })
})

app.get('/api/cart', verifyToken , (req,res)=>{

    const query = "SELECT c.productId , c.quantity , p.name , p.price , p.imageURL FROM cart c JOIN products p ON c.productId = p.id WHERE c.userId = ?"
                // The query joins the field of both the tables cart and products by checking if the productId and id in the product table matches //

    db.query(query , [req.userId] , (err , results)=>{
      if(err){
        res.status(500).json({error : "Error fetching the data"})
        return
      }
      res.json(results);
    })
})


// app.delete('/api/cart/:productId'  , verifyToken , (req , res)=>{
    
//     const query = "DELETE FROM cart WHERE userId = ? AND productId = ? ";
   
//   db.query(query ,  [req.userId ,req.params.productId] , (err , result)=>{
//       if(err){
//         res.status(500).json({error : "Error deleteing the product from cart"})
//         return
//       }
//       res.json({message : "Product deleted from cart successfully"})
//   })
// })

// app.put('/api/cart/:productId' , verifyToken , (req , res)=>{

//     const {quantity} = req.body ;

//     const query = 'UPDATE cart set quantity = ? WHERE userId = ?  AND productId = ?'

//    db.query(query , [quantity , req.userId , req.params.productId] , (err,result)=>{
//     if(err){
//         res.status(500).json({error : 'Not able to update cart'})
//         return
//     }
//     res.json({message : "Cart updated successfully"});

//    })
// })

app.delete('/api/cart/:productId',verifyToken,(req,res)=>{
    const query = "DELETE FROM cart WHERE userId = ? AND productId = ?"
    
    db.query(query,[req.userId , req.params.productId],(err , result)=>{
        if(err){
        res.status(500).json({error : "Error deleting from the backend"});
}})

res.json({message : 'Product deleted successfully'});
})

app.put('/api/cart/:productId', verifyToken , (req,res)=>{

    const {quantity} = req.body;

    const query = "UPDATE cart set quantity = ? WHERE userId = ? AND productId = ?"

    db.query(query , [quantity , req.userId , req.params.productId] , (err , result)=>{
     if(err){
      res.status(500).json({error : "Error in updating the data"})    
    }
    
    res.json({message : "Product updated successfully;"})

    })
})

app.post('/api/userProfile', verifyToken , upload.single('imageURL'), (req, res) => { // upload.single tells multer to hanlde the upload of a single file 
    const { fullName, age, sex, nationality} = req.body;
    console.log(req.body);
    let imageURL = null;

    if(req.file){
        imageURL = `/uploads/${req.file.filename}`
    }

    console.log(imageURL);

    // Insert user profile data into the database without the imageURL
    const query = 'INSERT INTO userProfile (userId, fullName, age, sex, nationality , imageURL) VALUES (?, ?, ?, ?, ?, ?)';
    db.query(query, [req.userId, fullName, age, sex, nationality,imageURL], (err, result) => {
        if (err) {
            res.status(500).json({ error: 'Error posting the user details' });
            return;
        }
        res.status(201).json({ userId: req.userId, fullName, age, sex, nationality , imageURL });
    });
});


app.get('/api/userProfile' , verifyToken , (req,res)=>{

    const query = 'SELECT * FROM userProfile WHERE userId = ?'

    db.query(query , [req.userId] , (err , result)=>{
        if(err){
            res.status(500).json({error : "Error selecting from the userProfiles"})
            return
        }
        res.json(result);
    })
})




app.listen(port ,()=>{
    console.log(`Server listening on ${port}`)
})

